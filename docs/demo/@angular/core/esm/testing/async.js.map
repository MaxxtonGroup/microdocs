{"version":3,"file":"async.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/testing/async.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAIH,IAAI,OAAO,GAAQ,CAAC,OAAO,MAAM,KAAK,WAAW,GAAG,MAAM,GAAG,MAAM,CAAC,CAAC;AAErE;;;;;;;;;;;;;;;;GAgBG;AACH,sBAAsB,EAAY;IAChC,8EAA8E;IAC9E,mDAAmD;IACnD,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;QACpB,MAAM,CAAC,CAAC,IAAS;YACf,aAAa,CAAC,EAAE,EAAE,IAAI,EAAE,CAAC,GAAmB;gBAC1C,EAAE,CAAC,CAAC,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC;oBAC5B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,CAAS,GAAG,CAAC,CAAC,CAAC;gBAC3C,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;IACJ,CAAC;IACD,4EAA4E;IAC5E,2EAA2E;IAC3E,gEAAgE;IAChE,MAAM,CAAC,MAAM,IAAI,OAAO,CAAO,CAAC,cAAc,EAAE,YAAY;QACnD,aAAa,CAAC,EAAE,EAAE,cAAc,EAAE,YAAY,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;AACZ,CAAC;AAED,uBAAuB,EAAY,EAAE,cAAwB,EAAE,YAAsB;IACnF,IAAI,iBAAiB,GAAI,IAA8B,CAAC,mBAAmB,CAAC,CAAC;IAC7E,EAAE,CAAC,CAAC,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC;QACpC,MAAM,IAAI,KAAK,CACX,kFAAkF;YAClF,4EAA4E,CAAC,CAAC;IACpF,CAAC;IACD,IAAI,YAAY,GAAG,IAAI,iBAAiB,CAAC,cAAc,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;IAC/E,IAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC/C,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;AAC1B,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var global: any;\n\nvar _global = <any>(typeof window === 'undefined' ? global : window);\n\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', async(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n * @stable\n */\nexport function async(fn: Function): (done: any) => any {\n  // If we're running using the Jasmine test framework, adapt to call the 'done'\n  // function when asynchronous activity is finished.\n  if (_global.jasmine) {\n    return (done: any) => {\n      runInTestZone(fn, done, (err: string | Error) => {\n        if (typeof err === 'string') {\n          return done.fail(new Error(<string>err));\n        } else {\n          done.fail(err);\n        }\n      });\n    };\n  }\n  // Otherwise, return a promise which will resolve when asynchronous activity\n  // is finished. This will be correctly consumed by the Mocha framework with\n  // it('...', async(myFn)); or can be used in a custom framework.\n  return () => new Promise<void>((finishCallback, failCallback) => {\n           runInTestZone(fn, finishCallback, failCallback);\n         });\n}\n\nfunction runInTestZone(fn: Function, finishCallback: Function, failCallback: Function) {\n  var AsyncTestZoneSpec = (Zone as any /** TODO #9100 */)['AsyncTestZoneSpec'];\n  if (AsyncTestZoneSpec === undefined) {\n    throw new Error(\n        'AsyncTestZoneSpec is needed for the async() test helper but could not be found. ' +\n        'Please make sure that your environment includes zone.js/dist/async-test.js');\n  }\n  var testZoneSpec = new AsyncTestZoneSpec(finishCallback, failCallback, 'test');\n  var testZone = Zone.current.fork(testZoneSpec);\n  return testZone.run(fn);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}