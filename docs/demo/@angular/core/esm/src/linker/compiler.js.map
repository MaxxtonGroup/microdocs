{"version":3,"file":"compiler.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/linker/compiler.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,aAAa,EAAC,MAAM,sBAAsB;OAC3C,EAAqB,SAAS,EAAC,MAAM,gBAAgB;AAK5D;;;;;GAKG;AACH;IACE;;OAEG;IACH,qBAAqB,CAAI,SAA0B;QACjD,MAAM,IAAI,aAAa,CACnB,oDAAoD,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;IAClF,CAAC;IACD;;;OAGG;IACH,oBAAoB,CAAI,SAA0B;QAChD,MAAM,IAAI,aAAa,CACnB,oDAAoD,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;IAClF,CAAC;IACD;;OAEG;IACH,UAAU,KAAU,CAAC;IACrB;;OAEG;IACH,aAAa,CAAC,QAAc,IAAG,CAAC;AAClC,CAAC;AAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BaseException} from '../facade/exceptions';\nimport {ConcreteType, Type, stringify} from '../facade/lang';\n\nimport {ComponentFactory} from './component_factory';\n\n\n/**\n * Low-level service for running the angular compiler duirng runtime\n * to create {@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n * @stable\n */\nexport class Compiler {\n  /**\n   * Loads the template and styles of a component and returns the associated `ComponentFactory`.\n   */\n  compileComponentAsync<T>(component: ConcreteType<T>): Promise<ComponentFactory<T>> {\n    throw new BaseException(\n        `Runtime compiler is not loaded. Tried to compile ${stringify(component)}`);\n  }\n  /**\n   * Compiles the given component. All templates have to be either inline or compiled via\n   * `compileComponentAsync` before.\n   */\n  compileComponentSync<T>(component: ConcreteType<T>): ComponentFactory<T> {\n    throw new BaseException(\n        `Runtime compiler is not loaded. Tried to compile ${stringify(component)}`);\n  }\n  /**\n   * Clears all caches\n   */\n  clearCache(): void {}\n  /**\n   * Clears the cache for the given component.\n   */\n  clearCacheFor(compType: Type) {}\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}