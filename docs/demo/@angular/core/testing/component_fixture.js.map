{"version":3,"file":"component_fixture.js","sourceRoot":"","sources":["../../../../modules/@angular/core/testing/component_fixture.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEntryMetadata, ChangeDetectorRef, ComponentFactory, ComponentRef, ComponentResolver, DebugElement, ElementRef, Injectable, Injector, NgZone, NgZoneError, OpaqueToken, ViewMetadata, getDebugNode} from '../index';\nimport {ObservableWrapper, PromiseCompleter, PromiseWrapper} from '../src/facade/async';\nimport {BaseException} from '../src/facade/exceptions';\nimport {scheduleMicroTask} from '../src/facade/lang';\n\nimport {tick} from './fake_async';\n\n\n/**\n * Fixture for debugging and testing a component.\n *\n * @stable\n */\nexport class ComponentFixture<T> {\n  /**\n   * The DebugElement associated with the root element of this component.\n   */\n  debugElement: DebugElement;\n\n  /**\n   * The instance of the root component class.\n   */\n  componentInstance: any;\n\n  /**\n   * The native element at the root of the component.\n   */\n  nativeElement: any;\n\n  /**\n   * The ElementRef for the element at the root of the component.\n   */\n  elementRef: ElementRef;\n\n  /**\n   * The ComponentRef for the component\n   */\n  componentRef: ComponentRef<T>;\n\n  /**\n   * The ChangeDetectorRef for the component\n   */\n  changeDetectorRef: ChangeDetectorRef;\n\n  /**\n   * The NgZone in which this component was instantiated.\n   */\n  ngZone: NgZone;\n\n  private _autoDetect: boolean;\n\n  private _isStable: boolean = true;\n  private _completer: PromiseCompleter<any> = null;\n  private _onUnstableSubscription: any /** TODO #9100 */ = null;\n  private _onStableSubscription: any /** TODO #9100 */ = null;\n  private _onMicrotaskEmptySubscription: any /** TODO #9100 */ = null;\n  private _onErrorSubscription: any /** TODO #9100 */ = null;\n\n  constructor(componentRef: ComponentRef<T>, ngZone: NgZone, autoDetect: boolean) {\n    this.changeDetectorRef = componentRef.changeDetectorRef;\n    this.elementRef = componentRef.location;\n    this.debugElement = <DebugElement>getDebugNode(this.elementRef.nativeElement);\n    this.componentInstance = componentRef.instance;\n    this.nativeElement = this.elementRef.nativeElement;\n    this.componentRef = componentRef;\n    this.ngZone = ngZone;\n    this._autoDetect = autoDetect;\n\n    if (ngZone != null) {\n      this._onUnstableSubscription =\n          ObservableWrapper.subscribe(ngZone.onUnstable, (_) => { this._isStable = false; });\n      this._onMicrotaskEmptySubscription =\n          ObservableWrapper.subscribe(ngZone.onMicrotaskEmpty, (_) => {\n            if (this._autoDetect) {\n              // Do a change detection run with checkNoChanges set to true to check\n              // there are no changes on the second run.\n              this.detectChanges(true);\n            }\n          });\n      this._onStableSubscription = ObservableWrapper.subscribe(ngZone.onStable, (_) => {\n        this._isStable = true;\n        // Check whether there are no pending macrotasks in a microtask so that ngZone gets a chance\n        // to update the state of pending macrotasks.\n        scheduleMicroTask(() => {\n          if (!this.ngZone.hasPendingMacrotasks) {\n            if (this._completer != null) {\n              this._completer.resolve(true);\n              this._completer = null;\n            }\n          }\n        });\n      });\n\n      this._onErrorSubscription = ObservableWrapper.subscribe(\n          ngZone.onError, (error: NgZoneError) => { throw error.error; });\n    }\n  }\n\n  private _tick(checkNoChanges: boolean) {\n    this.changeDetectorRef.detectChanges();\n    if (checkNoChanges) {\n      this.checkNoChanges();\n    }\n  }\n\n  /**\n   * Trigger a change detection cycle for the component.\n   */\n  detectChanges(checkNoChanges: boolean = true): void {\n    if (this.ngZone != null) {\n      // Run the change detection inside the NgZone so that any async tasks as part of the change\n      // detection are captured by the zone and can be waited for in isStable.\n      this.ngZone.run(() => { this._tick(checkNoChanges); });\n    } else {\n      // Running without zone. Just do the change detection.\n      this._tick(checkNoChanges);\n    }\n  }\n\n  /**\n   * Do a change detection run to make sure there were no changes.\n   */\n  checkNoChanges(): void { this.changeDetectorRef.checkNoChanges(); }\n\n  /**\n   * Set whether the fixture should autodetect changes.\n   *\n   * Also runs detectChanges once so that any existing change is detected.\n   */\n  autoDetectChanges(autoDetect: boolean = true) {\n    if (this.ngZone == null) {\n      throw new BaseException('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\n    }\n    this._autoDetect = autoDetect;\n    this.detectChanges();\n  }\n\n  /**\n   * Return whether the fixture is currently stable or has async tasks that have not been completed\n   * yet.\n   */\n  isStable(): boolean { return this._isStable && !this.ngZone.hasPendingMacrotasks; }\n\n  /**\n   * Get a promise that resolves when the fixture is stable.\n   *\n   * This can be used to resume testing after events have triggered asynchronous activity or\n   * asynchronous change detection.\n   */\n  whenStable(): Promise<any> {\n    if (this.isStable()) {\n      return PromiseWrapper.resolve(false);\n    } else if (this._completer !== null) {\n      return this._completer.promise;\n    } else {\n      this._completer = new PromiseCompleter<any>();\n      return this._completer.promise;\n    }\n  }\n\n  /**\n   * Trigger component destruction.\n   */\n  destroy(): void {\n    this.componentRef.destroy();\n    if (this._onUnstableSubscription != null) {\n      ObservableWrapper.dispose(this._onUnstableSubscription);\n      this._onUnstableSubscription = null;\n    }\n    if (this._onStableSubscription != null) {\n      ObservableWrapper.dispose(this._onStableSubscription);\n      this._onStableSubscription = null;\n    }\n    if (this._onMicrotaskEmptySubscription != null) {\n      ObservableWrapper.dispose(this._onMicrotaskEmptySubscription);\n      this._onMicrotaskEmptySubscription = null;\n    }\n    if (this._onErrorSubscription != null) {\n      ObservableWrapper.dispose(this._onErrorSubscription);\n      this._onErrorSubscription = null;\n    }\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}