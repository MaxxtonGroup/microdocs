{"version":3,"file":"router.js","sourceRoot":"","sources":["../../../../modules/@angular/router/src/router.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/mergeMap';\nimport 'rxjs/add/operator/mergeAll';\nimport 'rxjs/add/operator/reduce';\nimport 'rxjs/add/operator/every';\nimport 'rxjs/add/observable/from';\nimport 'rxjs/add/observable/forkJoin';\n\nimport {Location} from '@angular/common';\nimport {ComponentResolver, Injector, ReflectiveInjector, Type} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {of } from 'rxjs/observable/of';\n\nimport {applyRedirects} from './apply_redirects';\nimport {Data, ResolveData, RouterConfig, validateConfig} from './config';\nimport {createRouterState} from './create_router_state';\nimport {createUrlTree} from './create_url_tree';\nimport {RouterOutlet} from './directives/router_outlet';\nimport {recognize} from './recognize';\nimport {resolve} from './resolve';\nimport {RouterOutletMap} from './router_outlet_map';\nimport {ActivatedRoute, ActivatedRouteSnapshot, InheritedResolve, RouterState, RouterStateSnapshot, advanceActivatedRoute, createEmptyState} from './router_state';\nimport {PRIMARY_OUTLET, Params} from './shared';\nimport {UrlSerializer, UrlTree, createEmptyUrlTree} from './url_tree';\nimport {forEach, merge, shallowEqual} from './utils/collection';\nimport {TreeNode} from './utils/tree';\n\nexport interface NavigationExtras {\n  relativeTo?: ActivatedRoute;\n  queryParams?: Params;\n  fragment?: string;\n}\n\n/**\n * An event triggered when a navigation starts\n *\n * @stable\n */\nexport class NavigationStart {\n  constructor(public id: number, public url: string) {}\n\n  toString(): string { return `NavigationStart(id: ${this.id}, url: '${this.url}')`; }\n}\n\n/**\n * An event triggered when a navigation ends successfully\n *\n * @stable\n */\nexport class NavigationEnd {\n  constructor(public id: number, public url: string, public urlAfterRedirects: string) {}\n\n  toString(): string {\n    return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;\n  }\n}\n\n/**\n * An event triggered when a navigation is canceled\n *\n * @stable\n */\nexport class NavigationCancel {\n  constructor(public id: number, public url: string) {}\n\n  toString(): string { return `NavigationCancel(id: ${this.id}, url: '${this.url}')`; }\n}\n\n/**\n * An event triggered when a navigation fails due to unexpected error\n *\n * @stable\n */\nexport class NavigationError {\n  constructor(public id: number, public url: string, public error: any) {}\n\n  toString(): string {\n    return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;\n  }\n}\n\n/**\n * An event triggered when routes are recognized\n *\n * @stable\n */\nexport class RoutesRecognized {\n  constructor(\n      public id: number, public url: string, public urlAfterRedirects: string,\n      public state: RouterStateSnapshot) {}\n\n  toString(): string {\n    return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * @stable\n */\nexport type Event = NavigationStart | NavigationEnd | NavigationCancel | NavigationError;\n\n/**\n * The `Router` is responsible for mapping URLs to components.\n *\n * See {@link RouterConfig) for more details and examples.\n *\n * @stable\n */\nexport class Router {\n  private currentUrlTree: UrlTree;\n  private currentRouterState: RouterState;\n  private locationSubscription: Subscription;\n  private routerEvents: Subject<Event>;\n  private navigationId: number = 0;\n  private config: RouterConfig;\n\n  /**\n   * Creates the router service.\n   */\n  constructor(\n      private rootComponentType: Type, private resolver: ComponentResolver,\n      private urlSerializer: UrlSerializer, private outletMap: RouterOutletMap,\n      private location: Location, private injector: Injector, config: RouterConfig) {\n    this.resetConfig(config);\n    this.routerEvents = new Subject<Event>();\n    this.currentUrlTree = createEmptyUrlTree();\n    this.currentRouterState = createEmptyState(this.currentUrlTree, this.rootComponentType);\n  }\n\n  /**\n   * @internal\n   */\n  initialNavigation(): void {\n    this.setUpLocationChangeListener();\n    this.navigateByUrl(this.location.path(true));\n  }\n\n  /**\n   * Returns the current route state.\n   */\n  get routerState(): RouterState { return this.currentRouterState; }\n\n  /**\n   * Returns the current url.\n   */\n  get url(): string { return this.serializeUrl(this.currentUrlTree); }\n\n  /**\n   * Returns an observable of route events\n   */\n  get events(): Observable<Event> { return this.routerEvents; }\n\n  /**\n   * Resets the configuration used for navigation and generating links.\n   *\n   * ### Usage\n   *\n   * ```\n   * router.resetConfig([\n   *  { path: 'team/:id', component: TeamCmp, children: [\n   *    { path: 'simple', component: SimpleCmp },\n   *    { path: 'user/:name', component: UserCmp }\n   *  ] }\n   * ]);\n   * ```\n   */\n  resetConfig(config: RouterConfig): void {\n    validateConfig(config);\n    this.config = config;\n  }\n\n  /**\n   * @internal\n   */\n  dispose(): void { this.locationSubscription.unsubscribe(); }\n\n  /**\n   * Applies an array of commands to the current url tree and creates\n   * a new url tree.\n   *\n   * When given an activate route, applies the given commands starting from the route.\n   * When not given a route, applies the given command starting from the root.\n   *\n   * ### Usage\n   *\n   * ```\n   * // create /team/33/user/11\n   * router.createUrlTree(['/team', 33, 'user', 11]);\n   *\n   * // create /team/33;expand=true/user/11\n   * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n   *\n   * // you can collapse static fragments like this\n   * router.createUrlTree(['/team/33/user', userId]);\n   *\n   * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n   *\n   * // navigate to /team/33/user/11/details\n   * router.createUrlTree(['details'], {relativeTo: route});\n   *\n   * // navigate to /team/33/user/22\n   * router.createUrlTree(['../22'], {relativeTo: route});\n   *\n   * // navigate to /team/44/user/22\n   * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n   * ```\n   */\n  createUrlTree(commands: any[], {relativeTo, queryParams, fragment}: NavigationExtras = {}):\n      UrlTree {\n    const a = relativeTo ? relativeTo : this.routerState.root;\n    return createUrlTree(a, this.currentUrlTree, commands, queryParams, fragment);\n  }\n\n  /**\n   * Navigate based on the provided url. This navigation is always absolute.\n   *\n   * Returns a promise that:\n   * - is resolved with 'true' when navigation succeeds\n   * - is resolved with 'false' when navigation fails\n   * - is rejected when an error happens\n   *\n   * ### Usage\n   *\n   * ```\n   * router.navigateByUrl(\"/team/33/user/11\");\n   * ```\n   */\n  navigateByUrl(url: string|UrlTree): Promise<boolean> {\n    if (url instanceof UrlTree) {\n      return this.scheduleNavigation(url, false);\n    } else {\n      const urlTree = this.urlSerializer.parse(url);\n      return this.scheduleNavigation(urlTree, false);\n    }\n  }\n\n  /**\n   * Navigate based on the provided array of commands and a starting point.\n   * If no starting route is provided, the navigation is absolute.\n   *\n   * Returns a promise that:\n   * - is resolved with 'true' when navigation succeeds\n   * - is resolved with 'false' when navigation fails\n   * - is rejected when an error happens\n   *\n   * ### Usage\n   *\n   * ```\n   * router.navigate(['team', 33, 'team', '11], {relativeTo: route});\n   * ```\n   */\n  navigate(commands: any[], extras: NavigationExtras = {}): Promise<boolean> {\n    return this.scheduleNavigation(this.createUrlTree(commands, extras), false);\n  }\n\n  /**\n   * Serializes a {@link UrlTree} into a string.\n   */\n  serializeUrl(url: UrlTree): string { return this.urlSerializer.serialize(url); }\n\n  /**\n   * Parse a string into a {@link UrlTree}.\n   */\n  parseUrl(url: string): UrlTree { return this.urlSerializer.parse(url); }\n\n  private scheduleNavigation(url: UrlTree, preventPushState: boolean): Promise<boolean> {\n    const id = ++this.navigationId;\n    this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));\n    return Promise.resolve().then((_) => this.runNavigate(url, preventPushState, id));\n  }\n\n  private setUpLocationChangeListener(): void {\n    this.locationSubscription = <any>this.location.subscribe((change) => {\n      return this.scheduleNavigation(this.urlSerializer.parse(change['url']), change['pop']);\n    });\n  }\n\n  private runNavigate(url: UrlTree, preventPushState: boolean, id: number): Promise<boolean> {\n    if (id !== this.navigationId) {\n      this.location.go(this.urlSerializer.serialize(this.currentUrlTree));\n      this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url)));\n      return Promise.resolve(false);\n    }\n\n    return new Promise((resolvePromise, rejectPromise) => {\n      let updatedUrl: UrlTree;\n      let state: RouterState;\n      let navigationIsSuccessful: boolean;\n      let preActivation: PreActivation;\n      applyRedirects(url, this.config)\n          .mergeMap(u => {\n            updatedUrl = u;\n            return recognize(\n                this.rootComponentType, this.config, updatedUrl, this.serializeUrl(updatedUrl));\n          })\n\n          .mergeMap((newRouterStateSnapshot) => {\n            this.routerEvents.next(new RoutesRecognized(\n                id, this.serializeUrl(url), this.serializeUrl(updatedUrl), newRouterStateSnapshot));\n            return resolve(this.resolver, newRouterStateSnapshot);\n\n          })\n          .map((routerStateSnapshot) => {\n            return createRouterState(routerStateSnapshot, this.currentRouterState);\n\n          })\n          .map((newState: RouterState) => {\n            state = newState;\n            preActivation =\n                new PreActivation(state.snapshot, this.currentRouterState.snapshot, this.injector);\n            preActivation.traverse(this.outletMap);\n          })\n          .mergeMap(_ => {\n            return preActivation.checkGuards();\n\n          })\n          .mergeMap(shouldActivate => {\n            if (shouldActivate) {\n              return preActivation.resolveData().map(() => shouldActivate);\n            } else {\n              return of (shouldActivate);\n            }\n\n          })\n          .forEach((shouldActivate: boolean) => {\n            if (!shouldActivate || id !== this.navigationId) {\n              this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url)));\n              navigationIsSuccessful = false;\n              return;\n            }\n\n            new ActivateRoutes(state, this.currentRouterState).activate(this.outletMap);\n\n            this.currentUrlTree = updatedUrl;\n            this.currentRouterState = state;\n            if (!preventPushState) {\n              let path = this.urlSerializer.serialize(updatedUrl);\n              if (this.location.isCurrentPathEqualTo(path)) {\n                this.location.replaceState(path);\n              } else {\n                this.location.go(path);\n              }\n            }\n            navigationIsSuccessful = true;\n          })\n          .then(\n              () => {\n                this.routerEvents.next(\n                    new NavigationEnd(id, this.serializeUrl(url), this.serializeUrl(updatedUrl)));\n                resolvePromise(navigationIsSuccessful);\n              },\n              e => {\n                this.routerEvents.next(new NavigationError(id, this.serializeUrl(url), e));\n                rejectPromise(e);\n              });\n    });\n  }\n}\n\n/**\n * @experimental\n */\nclass CanActivate {\n  constructor(public route: ActivatedRouteSnapshot) {}\n}\n\n/**\n * @experimental\n */\nclass CanDeactivate {\n  constructor(public component: Object, public route: ActivatedRouteSnapshot) {}\n}\n\nclass PreActivation {\n  private checks: Array<CanActivate|CanDeactivate> = [];\n  constructor(\n      private future: RouterStateSnapshot, private curr: RouterStateSnapshot,\n      private injector: Injector) {}\n\n  traverse(parentOutletMap: RouterOutletMap): void {\n    const futureRoot = this.future._root;\n    const currRoot = this.curr ? this.curr._root : null;\n    this.traverseChildRoutes(futureRoot, currRoot, parentOutletMap);\n  }\n\n  checkGuards(): Observable<boolean> {\n    if (this.checks.length === 0) return of (true);\n    return Observable.from(this.checks)\n        .map(s => {\n          if (s instanceof CanActivate) {\n            return this.runCanActivate(s.route);\n          } else if (s instanceof CanDeactivate) {\n            // workaround https://github.com/Microsoft/TypeScript/issues/7271\n            const s2 = s as CanDeactivate;\n            return this.runCanDeactivate(s2.component, s2.route);\n          } else {\n            throw new Error('Cannot be reached');\n          }\n        })\n        .mergeAll()\n        .every(result => result === true);\n  }\n\n  resolveData(): Observable<any> {\n    if (this.checks.length === 0) return of (null);\n    return Observable.from(this.checks)\n        .mergeMap(s => {\n          if (s instanceof CanActivate) {\n            return this.runResolve(s.route);\n          } else {\n            return of (null);\n          }\n        })\n        .reduce((_, __) => _);\n  }\n\n  private traverseChildRoutes(\n      futureNode: TreeNode<ActivatedRouteSnapshot>, currNode: TreeNode<ActivatedRouteSnapshot>,\n      outletMap: RouterOutletMap): void {\n    const prevChildren: {[key: string]: any} = nodeChildrenAsMap(currNode);\n    futureNode.children.forEach(c => {\n      this.traverseRoutes(c, prevChildren[c.value.outlet], outletMap);\n      delete prevChildren[c.value.outlet];\n    });\n    forEach(\n        prevChildren,\n        (v: any, k: string) => this.deactivateOutletAndItChildren(v, outletMap._outlets[k]));\n  }\n\n  traverseRoutes(\n      futureNode: TreeNode<ActivatedRouteSnapshot>, currNode: TreeNode<ActivatedRouteSnapshot>,\n      parentOutletMap: RouterOutletMap): void {\n    const future = futureNode.value;\n    const curr = currNode ? currNode.value : null;\n    const outlet = parentOutletMap ? parentOutletMap._outlets[futureNode.value.outlet] : null;\n\n    // reusing the node\n    if (curr && future._routeConfig === curr._routeConfig) {\n      if (!shallowEqual(future.params, curr.params)) {\n        this.checks.push(new CanDeactivate(outlet.component, curr), new CanActivate(future));\n      }\n\n      // If we have a component, we need to go through an outlet.\n      if (future.component) {\n        this.traverseChildRoutes(futureNode, currNode, outlet ? outlet.outletMap : null);\n\n        // if we have a componentless route, we recurse but keep the same outlet map.\n      } else {\n        this.traverseChildRoutes(futureNode, currNode, parentOutletMap);\n      }\n    } else {\n      if (curr) {\n        // if we had a normal route, we need to deactivate only that outlet.\n        if (curr.component) {\n          this.deactivateOutletAndItChildren(curr, outlet);\n\n          // if we had a componentless route, we need to deactivate everything!\n        } else {\n          this.deactivateOutletMap(parentOutletMap);\n        }\n      }\n\n      this.checks.push(new CanActivate(future));\n      // If we have a component, we need to go through an outlet.\n      if (future.component) {\n        this.traverseChildRoutes(futureNode, null, outlet ? outlet.outletMap : null);\n\n        // if we have a componentless route, we recurse but keep the same outlet map.\n      } else {\n        this.traverseChildRoutes(futureNode, null, parentOutletMap);\n      }\n    }\n  }\n\n  private deactivateOutletAndItChildren(route: ActivatedRouteSnapshot, outlet: RouterOutlet): void {\n    if (outlet && outlet.isActivated) {\n      this.deactivateOutletMap(outlet.outletMap);\n      this.checks.push(new CanDeactivate(outlet.component, route));\n    }\n  }\n\n  private deactivateOutletMap(outletMap: RouterOutletMap): void {\n    forEach(outletMap._outlets, (v: RouterOutlet) => {\n      if (v.isActivated) {\n        this.deactivateOutletAndItChildren(v.activatedRoute.snapshot, v);\n      }\n    });\n  }\n\n  private runCanActivate(future: ActivatedRouteSnapshot): Observable<boolean> {\n    const canActivate = future._routeConfig ? future._routeConfig.canActivate : null;\n    if (!canActivate || canActivate.length === 0) return of (true);\n    return Observable.from(canActivate)\n        .map(c => {\n          const guard = this.injector.get(c);\n          if (guard.canActivate) {\n            return wrapIntoObservable(guard.canActivate(future, this.future));\n          } else {\n            return wrapIntoObservable(guard(future, this.future));\n          }\n        })\n        .mergeAll()\n        .every(result => result === true);\n  }\n\n  private runCanDeactivate(component: Object, curr: ActivatedRouteSnapshot): Observable<boolean> {\n    const canDeactivate = curr && curr._routeConfig ? curr._routeConfig.canDeactivate : null;\n    if (!canDeactivate || canDeactivate.length === 0) return of (true);\n    return Observable.from(canDeactivate)\n        .map(c => {\n          const guard = this.injector.get(c);\n\n          if (guard.canDeactivate) {\n            return wrapIntoObservable(guard.canDeactivate(component, curr, this.curr));\n          } else {\n            return wrapIntoObservable(guard(component, curr, this.curr));\n          }\n        })\n        .mergeAll()\n        .every(result => result === true);\n  }\n\n  private runResolve(future: ActivatedRouteSnapshot): Observable<any> {\n    const resolve = future._resolve;\n    return this.resolveNode(resolve.current, future).map(resolvedData => {\n      resolve.resolvedData = resolvedData;\n      future.data = merge(future.data, resolve.flattenedResolvedData);\n      return null;\n    });\n  }\n\n  private resolveNode(resolve: ResolveData, future: ActivatedRouteSnapshot): Observable<any> {\n    const resolvingObs: Observable<any>[] = [];\n    const resolvedData: {[k: string]: any} = {};\n    forEach(resolve, (v: any, k: string) => {\n      const resolver = this.injector.get(v);\n      const obs = resolver.resolve ? wrapIntoObservable(resolver.resolve(future, this.future)) :\n                                     wrapIntoObservable(resolver(future, this.future));\n      resolvingObs.push(obs.map((_: any) => { resolvedData[k] = _; }));\n    });\n\n    if (resolvingObs.length > 0) {\n      return Observable.forkJoin(resolvingObs).map(r => resolvedData);\n    } else {\n      return of (resolvedData);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(value: T | Observable<T>): Observable<T> {\n  if (value instanceof Observable) {\n    return value;\n  } else {\n    return of (value);\n  }\n}\n\nclass ActivateRoutes {\n  constructor(private futureState: RouterState, private currState: RouterState) {}\n\n  activate(parentOutletMap: RouterOutletMap): void {\n    const futureRoot = this.futureState._root;\n    const currRoot = this.currState ? this.currState._root : null;\n    pushQueryParamsAndFragment(this.futureState);\n    advanceActivatedRoute(this.futureState.root);\n    this.activateChildRoutes(futureRoot, currRoot, parentOutletMap);\n  }\n\n  private activateChildRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>,\n      outletMap: RouterOutletMap): void {\n    const prevChildren: {[key: string]: any} = nodeChildrenAsMap(currNode);\n    futureNode.children.forEach(c => {\n      this.activateRoutes(c, prevChildren[c.value.outlet], outletMap);\n      delete prevChildren[c.value.outlet];\n    });\n    forEach(\n        prevChildren,\n        (v: any, k: string) => this.deactivateOutletAndItChildren(outletMap._outlets[k]));\n  }\n\n  activateRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>,\n      parentOutletMap: RouterOutletMap): void {\n    const future = futureNode.value;\n    const curr = currNode ? currNode.value : null;\n\n    // reusing the node\n    if (future === curr) {\n      // advance the route to push the parameters\n      advanceActivatedRoute(future);\n\n      // If we have a normal route, we need to go through an outlet.\n      if (future.component) {\n        const outlet = getOutlet(parentOutletMap, futureNode.value);\n        this.activateChildRoutes(futureNode, currNode, outlet.outletMap);\n\n        // if we have a componentless route, we recurse but keep the same outlet map.\n      } else {\n        this.activateChildRoutes(futureNode, currNode, parentOutletMap);\n      }\n    } else {\n      if (curr) {\n        // if we had a normal route, we need to deactivate only that outlet.\n        if (curr.component) {\n          const outlet = getOutlet(parentOutletMap, futureNode.value);\n          this.deactivateOutletAndItChildren(outlet);\n\n          // if we had a componentless route, we need to deactivate everything!\n        } else {\n          this.deactivateOutletMap(parentOutletMap);\n        }\n      }\n\n      // if we have a normal route, we need to advance the route\n      // and place the component into the outlet. After that recurse.\n      if (future.component) {\n        advanceActivatedRoute(future);\n        const outlet = getOutlet(parentOutletMap, futureNode.value);\n        const outletMap = new RouterOutletMap();\n        this.placeComponentIntoOutlet(outletMap, future, outlet);\n        this.activateChildRoutes(futureNode, null, outletMap);\n\n        // if we have a componentless route, we recurse but keep the same outlet map.\n      } else {\n        advanceActivatedRoute(future);\n        this.activateChildRoutes(futureNode, null, parentOutletMap);\n      }\n    }\n  }\n\n  private placeComponentIntoOutlet(\n      outletMap: RouterOutletMap, future: ActivatedRoute, outlet: RouterOutlet): void {\n    const resolved = ReflectiveInjector.resolve([\n      {provide: ActivatedRoute, useValue: future},\n      {provide: RouterOutletMap, useValue: outletMap}\n    ]);\n    outlet.activate(future, resolved, outletMap);\n  }\n\n  private deactivateOutletAndItChildren(outlet: RouterOutlet): void {\n    if (outlet && outlet.isActivated) {\n      this.deactivateOutletMap(outlet.outletMap);\n      outlet.deactivate();\n    }\n  }\n\n  private deactivateOutletMap(outletMap: RouterOutletMap): void {\n    forEach(outletMap._outlets, (v: RouterOutlet) => this.deactivateOutletAndItChildren(v));\n  }\n}\n\nfunction pushQueryParamsAndFragment(state: RouterState): void {\n  if (!shallowEqual(state.snapshot.queryParams, (<any>state.queryParams).value)) {\n    (<any>state.queryParams).next(state.snapshot.queryParams);\n  }\n\n  if (state.snapshot.fragment !== (<any>state.fragment).value) {\n    (<any>state.fragment).next(state.snapshot.fragment);\n  }\n}\n\nfunction nodeChildrenAsMap(node: TreeNode<any>) {\n  return node ? node.children.reduce((m: any, c: TreeNode<any>) => {\n    m[c.value.outlet] = c;\n    return m;\n  }, {}) : {};\n}\n\nfunction getOutlet(outletMap: RouterOutletMap, route: ActivatedRoute): RouterOutlet {\n  let outlet = outletMap._outlets[route.outlet];\n  if (!outlet) {\n    const componentName = (<any>route.component).name;\n    if (route.outlet === PRIMARY_OUTLET) {\n      throw new Error(`Cannot find primary outlet to load '${componentName}'`);\n    } else {\n      throw new Error(`Cannot find the outlet ${route.outlet} to load '${componentName}'`);\n    }\n  }\n  return outlet;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}