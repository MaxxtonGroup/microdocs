{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../../../modules/@angular/router/src/interfaces.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {ActivatedRouteSnapshot, RouterStateSnapshot} from './router_state';\n\n/**\n * An interface a class can implement to be a guard deciding if a route can be activated.\n *\n * ### Example\n *\n * ```\n * class CanActivateTeam implements CanActivate {\n *   constructor(private permissions: Permissions, private currentUser: UserToken) {}\n *\n *   canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):Observable<boolean> {\n *     return this.permissions.canActivate(this.currentUser, this.route.params.id);\n *   }\n * }\n *\n * bootstrap(AppComponent, [\n *   CanActivateTeam,\n *\n *   provideRouter([{\n *     path: 'team/:id',\n *     component: Team,\n *     canActivate: [CanActivateTeam]\n *   }])\n * );\n * ```\n *\n * You can also provide a function with the same signature instead of the class:\n *\n * ```\n * bootstrap(AppComponent, [\n *   {provide: 'canActivateTeam', useValue: (route: ActivatedRouteSnapshot, state:\n * RouterStateSnapshot) => true},\n *   provideRouter([{\n *     path: 'team/:id',\n *     component: Team,\n *     canActivate: ['canActivateTeam']\n *   }])\n * );\n * ```\n *\n * @stable\n */\nexport interface CanActivate {\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):\n      Observable<boolean>|boolean;\n}\n\n/**\n * An interface a class can implement to be a guard deciding if a route can be deactivated.\n *\n * ### Example\n *\n * ```\n * class CanDeactivateTeam implements CanDeactivate {\n *   constructor(private permissions: Permissions, private currentUser: UserToken) {}\n *\n *   canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):Observable<boolean> {\n *     return this.permissions.canDeactivate(this.currentUser, this.route.params.id);\n *   }\n * }\n *\n * bootstrap(AppComponent, [\n *   CanDeactivateTeam,\n *\n *   provideRouter([{\n *     path: 'team/:id',\n *     component: Team,\n *     canDeactivate: [CanDeactivateTeam]\n *   }])\n * );\n * ```\n *\n * You can also provide a function with the same signature instead of the class:\n *\n * ```\n * bootstrap(AppComponent, [\n *   {provide: 'canDeactivateTeam', useValue: (route: ActivatedRouteSnapshot, state:\n * RouterStateSnapshot) => true},\n *   provideRouter([{\n *     path: 'team/:id',\n *     component: Team,\n *     canActivate: ['canDeactivateTeam']\n *   }])\n * );\n * ```\n *\n * @stable\n */\nexport interface CanDeactivate<T> {\n  canDeactivate(component: T, route: ActivatedRouteSnapshot, state: RouterStateSnapshot):\n      Observable<boolean>|boolean;\n}\n\n/**\n * An interface a class can implement to be a data provider.\n *\n * ### Example\n *\n * ```\n * class TeamResolver implements Resolve {\n *   constructor(private backend: Backend) {}\n *\n *   resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):Observable<any> {\n *     return this.backend.fetchTeam(this.route.params.id);\n *   }\n * }\n *\n * bootstrap(AppComponent, [\n *   TeamResolver,\n *\n *   provideRouter([{\n *     path: 'team/:id',\n *     component: TeamCmp,\n *     resolve: {\n *       team: TeamResolver\n *     }\n *   }])\n * );\n * ```\n *\n * You can also provide a function with the same signature instead of the class.\n *\n * @experimental\n */\nexport interface Resolve<T> {\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<any>|any;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}