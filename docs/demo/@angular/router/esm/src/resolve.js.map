{"version":3,"file":"resolve.js","sourceRoot":"","sources":["../../../../../modules/@angular/router/src/resolve.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,uBAAuB;OACvB,6BAA6B;OAI7B,EAAC,QAAQ,EAAC,MAAM,0BAA0B;OAC1C,EAAC,WAAW,EAAC,MAAM,6BAA6B;AAKvD,wBACI,QAA2B,EAAE,KAA0B;IACzD,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC;AAC5D,CAAC;AAED,qBACI,QAA2B,EAAE,IAAsC;IACrE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;QAC/B,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,QAAQ,EAAO,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,OAAO;YACzE,IAAI,CAAC,KAAK,CAAC,yBAAyB,GAAG,OAAO,CAAC;YAC/C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC,CAAC,CAAC,CAAC;IAEN,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC;QACvE,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,gBAAgB,CAAC,QAAQ,EAAO,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,OAAO;YAClF,IAAI,CAAC,KAAK,CAAC,yBAAyB,GAAG,OAAO,CAAC;YAC/C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC,CAAC,CAAC,CAAC;IACN,CAAC;AACH,CAAC;AAED,0BACI,QAA2B,EAAE,QAAgC;IAC/D,0EAA0E;IAC1E,EAAE,CAAC,CAAC,QAAQ,CAAC,SAAS,IAAI,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAM,QAAQ,CAAC,SAAS,CAAC,CAAC;IAC5D,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/toPromise';\n\nimport {ComponentResolver} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {fromPromise} from 'rxjs/observable/fromPromise';\n\nimport {ActivatedRouteSnapshot, RouterStateSnapshot} from './router_state';\nimport {TreeNode} from './utils/tree';\n\nexport function resolve(\n    resolver: ComponentResolver, state: RouterStateSnapshot): Observable<RouterStateSnapshot> {\n  return resolveNode(resolver, state._root).map(_ => state);\n}\n\nfunction resolveNode(\n    resolver: ComponentResolver, node: TreeNode<ActivatedRouteSnapshot>): Observable<any> {\n  if (node.children.length === 0) {\n    return fromPromise(resolveComponent(resolver, <any>node.value).then(factory => {\n      node.value._resolvedComponentFactory = factory;\n      return node.value;\n    }));\n\n  } else {\n    const c = node.children.map(c => resolveNode(resolver, c).toPromise());\n    return forkJoin(c).map(_ => resolveComponent(resolver, <any>node.value).then(factory => {\n      node.value._resolvedComponentFactory = factory;\n      return node.value;\n    }));\n  }\n}\n\nfunction resolveComponent(\n    resolver: ComponentResolver, snapshot: ActivatedRouteSnapshot): Promise<any> {\n  // TODO: vsavkin change to typeof snapshot.component === 'string' in beta2\n  if (snapshot.component && snapshot._routeConfig) {\n    return resolver.resolveComponent(<any>snapshot.component);\n  } else {\n    return Promise.resolve(null);\n  }\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}