{"version":3,"file":"create_url_tree.js","sourceRoot":"","sources":["../../../../../modules/@angular/router/src/create_url_tree.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActivatedRoute} from './router_state';\nimport {PRIMARY_OUTLET, Params} from './shared';\nimport {UrlPathWithParams, UrlSegment, UrlTree} from './url_tree';\nimport {forEach, shallowEqual} from './utils/collection';\n\nexport function createUrlTree(\n    route: ActivatedRoute, urlTree: UrlTree, commands: any[], queryParams: Params,\n    fragment: string): UrlTree {\n  if (commands.length === 0) {\n    return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);\n  }\n\n  const normalizedCommands = normalizeCommands(commands);\n  if (navigateToRoot(normalizedCommands)) {\n    return tree(urlTree.root, new UrlSegment([], {}), urlTree, queryParams, fragment);\n  }\n\n  const startingPosition = findStartingPosition(normalizedCommands, urlTree, route);\n  const segment = startingPosition.processChildren ?\n      updateSegmentChildren(\n          startingPosition.segment, startingPosition.index, normalizedCommands.commands) :\n      updateSegment(startingPosition.segment, startingPosition.index, normalizedCommands.commands);\n  return tree(startingPosition.segment, segment, urlTree, queryParams, fragment);\n}\n\nfunction tree(\n    oldSegment: UrlSegment, newSegment: UrlSegment, urlTree: UrlTree, queryParams: Params,\n    fragment: string): UrlTree {\n  const q = queryParams ? stringify(queryParams) : urlTree.queryParams;\n  const f = fragment ? fragment : urlTree.fragment;\n\n  if (urlTree.root === oldSegment) {\n    return new UrlTree(newSegment, q, f);\n  } else {\n    return new UrlTree(replaceSegment(urlTree.root, oldSegment, newSegment), q, f);\n  }\n}\n\nfunction replaceSegment(\n    current: UrlSegment, oldSegment: UrlSegment, newSegment: UrlSegment): UrlSegment {\n  const children: {[key: string]: UrlSegment} = {};\n  forEach(current.children, (c: UrlSegment, outletName: string) => {\n    if (c === oldSegment) {\n      children[outletName] = newSegment;\n    } else {\n      children[outletName] = replaceSegment(c, oldSegment, newSegment);\n    }\n  });\n  return new UrlSegment(current.pathsWithParams, children);\n}\n\nfunction navigateToRoot(normalizedChange: NormalizedNavigationCommands): boolean {\n  return normalizedChange.isAbsolute && normalizedChange.commands.length === 1 &&\n      normalizedChange.commands[0] == '/';\n}\n\nclass NormalizedNavigationCommands {\n  constructor(\n      public isAbsolute: boolean, public numberOfDoubleDots: number, public commands: any[]) {}\n}\n\nfunction normalizeCommands(commands: any[]): NormalizedNavigationCommands {\n  if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] == '/') {\n    return new NormalizedNavigationCommands(true, 0, commands);\n  }\n\n  let numberOfDoubleDots = 0;\n  let isAbsolute = false;\n  const res: any[] = [];\n\n  for (let i = 0; i < commands.length; ++i) {\n    const c = commands[i];\n\n    if (!(typeof c === 'string')) {\n      res.push(c);\n      continue;\n    }\n\n    const parts = c.split('/');\n    for (let j = 0; j < parts.length; ++j) {\n      let cc = parts[j];\n\n      // first exp is treated in a special way\n      if (i == 0) {\n        if (j == 0 && cc == '.') {  //  './a'\n          // skip it\n        } else if (j == 0 && cc == '') {  //  '/a'\n          isAbsolute = true;\n        } else if (cc == '..') {  //  '../a'\n          numberOfDoubleDots++;\n        } else if (cc != '') {\n          res.push(cc);\n        }\n\n      } else {\n        if (cc != '') {\n          res.push(cc);\n        }\n      }\n    }\n  }\n\n  return new NormalizedNavigationCommands(isAbsolute, numberOfDoubleDots, res);\n}\n\nclass Position {\n  constructor(public segment: UrlSegment, public processChildren: boolean, public index: number) {}\n}\n\nfunction findStartingPosition(\n    normalizedChange: NormalizedNavigationCommands, urlTree: UrlTree,\n    route: ActivatedRoute): Position {\n  if (normalizedChange.isAbsolute) {\n    return new Position(urlTree.root, true, 0);\n  } else if (route.snapshot._lastPathIndex === -1) {\n    return new Position(route.snapshot._urlSegment, true, 0);\n  } else if (route.snapshot._lastPathIndex + 1 - normalizedChange.numberOfDoubleDots >= 0) {\n    return new Position(\n        route.snapshot._urlSegment, false,\n        route.snapshot._lastPathIndex + 1 - normalizedChange.numberOfDoubleDots);\n  } else {\n    throw new Error('Invalid number of \\'../\\'');\n  }\n}\n\nfunction getPath(command: any): any {\n  if (!(typeof command === 'string')) return command.toString();\n  const parts = command.toString().split(':');\n  return parts.length > 1 ? parts[1] : command;\n}\n\nfunction getOutlet(commands: any[]): string {\n  if (!(typeof commands[0] === 'string')) return PRIMARY_OUTLET;\n  const parts = commands[0].toString().split(':');\n  return parts.length > 1 ? parts[0] : PRIMARY_OUTLET;\n}\n\nfunction updateSegment(segment: UrlSegment, startIndex: number, commands: any[]): UrlSegment {\n  if (!segment) {\n    segment = new UrlSegment([], {});\n  }\n  if (segment.pathsWithParams.length === 0 && segment.hasChildren()) {\n    return updateSegmentChildren(segment, startIndex, commands);\n  }\n  const m = prefixedWith(segment, startIndex, commands);\n  const slicedCommands = commands.slice(m.lastIndex);\n\n  if (m.match && slicedCommands.length === 0) {\n    return new UrlSegment(segment.pathsWithParams, {});\n  } else if (m.match && !segment.hasChildren()) {\n    return createNewSegment(segment, startIndex, commands);\n  } else if (m.match) {\n    return updateSegmentChildren(segment, 0, slicedCommands);\n  } else {\n    return createNewSegment(segment, startIndex, commands);\n  }\n}\n\nfunction updateSegmentChildren(\n    segment: UrlSegment, startIndex: number, commands: any[]): UrlSegment {\n  if (commands.length === 0) {\n    return new UrlSegment(segment.pathsWithParams, {});\n  } else {\n    const outlet = getOutlet(commands);\n    const children: {[key: string]: UrlSegment} = {};\n    children[outlet] = updateSegment(segment.children[outlet], startIndex, commands);\n    forEach(segment.children, (child: UrlSegment, childOutlet: string) => {\n      if (childOutlet !== outlet) {\n        children[childOutlet] = child;\n      }\n    });\n    return new UrlSegment(segment.pathsWithParams, children);\n  }\n}\n\nfunction prefixedWith(segment: UrlSegment, startIndex: number, commands: any[]) {\n  let currentCommandIndex = 0;\n  let currentPathIndex = startIndex;\n\n  const noMatch = {match: false, lastIndex: 0};\n  while (currentPathIndex < segment.pathsWithParams.length) {\n    if (currentCommandIndex >= commands.length) return noMatch;\n    const path = segment.pathsWithParams[currentPathIndex];\n    const curr = getPath(commands[currentCommandIndex]);\n    const next =\n        currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\n\n    if (curr && next && (typeof next === 'object')) {\n      if (!compare(curr, next, path)) return noMatch;\n      currentCommandIndex += 2;\n    } else {\n      if (!compare(curr, {}, path)) return noMatch;\n      currentCommandIndex++;\n    }\n    currentPathIndex++;\n  }\n\n  return {match: true, lastIndex: currentCommandIndex};\n}\n\nfunction createNewSegment(segment: UrlSegment, startIndex: number, commands: any[]): UrlSegment {\n  const paths = segment.pathsWithParams.slice(0, startIndex);\n  let i = 0;\n  while (i < commands.length) {\n    // if we start with an object literal, we need to reuse the path part from the segment\n    if (i === 0 && (typeof commands[0] === 'object')) {\n      const p = segment.pathsWithParams[startIndex];\n      paths.push(new UrlPathWithParams(p.path, commands[0]));\n      i++;\n      continue;\n    }\n\n    const curr = getPath(commands[i]);\n    const next = (i < commands.length - 1) ? commands[i + 1] : null;\n    if (curr && next && (typeof next === 'object')) {\n      paths.push(new UrlPathWithParams(curr, stringify(next)));\n      i += 2;\n    } else {\n      paths.push(new UrlPathWithParams(curr, {}));\n      i++;\n    }\n  }\n  return new UrlSegment(paths, {});\n}\n\nfunction stringify(params: {[key: string]: any}): {[key: string]: string} {\n  const res: {[key: string]: string} = {};\n  forEach(params, (v: any, k: string) => res[k] = `${v}`);\n  return res;\n}\n\nfunction compare(\n    path: string, params: {[key: string]: any}, pathWithParams: UrlPathWithParams): boolean {\n  return path == pathWithParams.path && shallowEqual(params, pathWithParams.parameters);\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}