{"version":3,"file":"dom_test_component_renderer.js","sourceRoot":"","sources":["../../../../../modules/@angular/platform-browser-dynamic/testing/dom_test_component_renderer.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,qBAAqB,EAAC,MAAM,2BAA2B;OACxD,EAAC,MAAM,EAAE,UAAU,EAAC,MAAM,eAAe;OACzC,EAAC,QAAQ,EAAC,MAAM,2BAA2B;OAE3C,EAAC,MAAM,EAAC,MAAM,6BAA6B;AAClD,8CAA8C,qBAAqB;IACjE,YAAqB,IAAS,CAAC,iBAAiB;QAAI,OAAO,CAAC;QAAvC,SAAI,GAAJ,IAAI,CAAK;IAA+B,CAAC;IAE9D,iBAAiB,CAAC,QAAgB;QAChC,IAAI,MAAM,GAAgB,MAAM,EAAE,CAAC,UAAU,CACzC,MAAM,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,cAAc,CAAC,YAAY,QAAQ,UAAU,CAAC,CAAC,CAAC,CAAC;QAE/E,8CAA8C;QAC9C,IAAI,QAAQ,GAAG,MAAM,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;QAClE,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACzC,MAAM,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/B,CAAC;QACD,MAAM,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAC/C,CAAC;AASH,CAAC;AARD,kBAAkB;AACX,mCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,uCAAc,GAA2D;IAChF,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,QAAQ,EAAG,EAAE,EAAG,EAAC;CACtE,CACA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TestComponentRenderer} from '@angular/compiler/testing';\nimport {Inject, Injectable} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\n\nimport {getDOM} from '../platform_browser_private';\nexport class DOMTestComponentRenderer extends TestComponentRenderer {\n  constructor( private _doc: any /** TODO #9100 */) { super(); }\n\n  insertRootElement(rootElId: string) {\n    let rootEl = <HTMLElement>getDOM().firstChild(\n        getDOM().content(getDOM().createTemplate(`<div id=\"${rootElId}\"></div>`)));\n\n    // TODO(juliemr): can/should this be optional?\n    let oldRoots = getDOM().querySelectorAll(this._doc, '[id^=root]');\n    for (let i = 0; i < oldRoots.length; i++) {\n      getDOM().remove(oldRoots[i]);\n    }\n    getDOM().appendChild(this._doc.body, rootEl);\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}