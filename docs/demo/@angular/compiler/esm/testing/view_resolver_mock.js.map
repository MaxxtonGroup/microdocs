{"version":3,"file":"view_resolver_mock.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/testing/view_resolver_mock.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEntryMetadata, BaseException, Compiler, Injectable, Injector, Type, ViewMetadata, resolveForwardRef} from '@angular/core';\n\nimport {ViewResolver} from '../index';\nimport {Map} from '../src/facade/collection';\nimport {isArray, isBlank, isPresent, stringify} from '../src/facade/lang';\nexport class MockViewResolver extends ViewResolver {\n  /** @internal */\n  _views = new Map<Type, ViewMetadata>();\n  /** @internal */\n  _inlineTemplates = new Map<Type, string>();\n  /** @internal */\n  _animations = new Map<Type, AnimationEntryMetadata[]>();\n  /** @internal */\n  _directiveOverrides = new Map<Type, Map<Type, Type>>();\n\n  constructor(private _injector: Injector) { super(); }\n\n  private get _compiler(): Compiler { return this._injector.get(Compiler); }\n\n  private _clearCacheFor(component: Type) { this._compiler.clearCacheFor(component); }\n\n  /**\n   * Overrides the {@link ViewMetadata} for a component.\n   */\n  setView(component: Type, view: ViewMetadata): void {\n    this._views.set(component, view);\n    this._clearCacheFor(component);\n  }\n  /**\n   * Overrides the inline template for a component - other configuration remains unchanged.\n   */\n  setInlineTemplate(component: Type, template: string): void {\n    this._inlineTemplates.set(component, template);\n    this._clearCacheFor(component);\n  }\n\n  setAnimations(component: Type, animations: AnimationEntryMetadata[]): void {\n    this._animations.set(component, animations);\n    this._clearCacheFor(component);\n  }\n\n  /**\n   * Overrides a directive from the component {@link ViewMetadata}.\n   */\n  overrideViewDirective(component: Type, from: Type, to: Type): void {\n    var overrides = this._directiveOverrides.get(component);\n\n    if (isBlank(overrides)) {\n      overrides = new Map<Type, Type>();\n      this._directiveOverrides.set(component, overrides);\n    }\n\n    overrides.set(from, to);\n    this._clearCacheFor(component);\n  }\n\n  /**\n   * Returns the {@link ViewMetadata} for a component:\n   * - Set the {@link ViewMetadata} to the overridden view when it exists or fallback to the default\n   * `ViewResolver`,\n   *   see `setView`.\n   * - Override the directives, see `overrideViewDirective`.\n   * - Override the @View definition, see `setInlineTemplate`.\n   */\n  resolve(component: Type): ViewMetadata {\n    var view = this._views.get(component);\n    if (isBlank(view)) {\n      view = super.resolve(component);\n    }\n\n    var directives: any[] /** TODO #9100 */ = [];\n    if (isPresent(view.directives)) {\n      flattenArray(view.directives, directives);\n    }\n    var animations = view.animations;\n    var templateUrl = view.templateUrl;\n    var overrides = this._directiveOverrides.get(component);\n\n    var inlineAnimations = this._animations.get(component);\n    if (isPresent(inlineAnimations)) {\n      animations = inlineAnimations;\n    }\n\n    var inlineTemplate = this._inlineTemplates.get(component);\n    if (isPresent(inlineTemplate)) {\n      templateUrl = null;\n    } else {\n      inlineTemplate = view.template;\n    }\n\n    if (isPresent(overrides) && isPresent(view.directives)) {\n      overrides.forEach((to, from) => {\n        var srcIndex = directives.indexOf(from);\n        if (srcIndex == -1) {\n          throw new BaseException(\n              `Overriden directive ${stringify(from)} not found in the template of ${stringify(component)}`);\n        }\n        directives[srcIndex] = to;\n      });\n    }\n\n    view = new ViewMetadata({\n      template: inlineTemplate,\n      templateUrl: templateUrl,\n      directives: directives.length > 0 ? directives : null,\n      animations: animations,\n      styles: view.styles,\n      styleUrls: view.styleUrls,\n      pipes: view.pipes,\n      encapsulation: view.encapsulation,\n      interpolation: view.interpolation\n    });\n\n    return view;\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: Injector, },\n];\n}\n\nfunction flattenArray(tree: any[], out: Array<Type|any[]>): void {\n  if (!isPresent(tree)) return;\n  for (var i = 0; i < tree.length; i++) {\n    var item = resolveForwardRef(tree[i]);\n    if (isArray(item)) {\n      flattenArray(item, out);\n    } else {\n      out.push(item);\n    }\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}