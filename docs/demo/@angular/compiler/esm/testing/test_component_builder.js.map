{"version":3,"file":"test_component_builder.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/testing/test_component_builder.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEntryMetadata, Compiler, ComponentFactory, Injectable, Injector, NgZone, ViewMetadata} from '@angular/core';\nimport {ComponentFixture, ComponentFixtureNoNgZone, TestComponentBuilder} from '@angular/core/testing';\n\nimport {DirectiveResolver, ViewResolver} from '../index';\nimport {MapWrapper} from '../src/facade/collection';\nimport {ConcreteType, IS_DART, Type, isPresent} from '../src/facade/lang';\n\n/**\n * @deprecated Import TestComponentRenderer from @angular/core/testing\n */\nexport {TestComponentRenderer} from '@angular/core/testing';\n/**\n * @deprecated Import TestComponentBuilder from @angular/core/testing\n */\nexport {TestComponentBuilder} from '@angular/core/testing';\n/**\n * @deprecated Import ComponentFixture from @angular/core/testing\n */\nexport {ComponentFixture} from '@angular/core/testing';\n/**\n * @deprecated Import ComponentFixtureNoNgZone from @angular/core/testing\n */\nexport {ComponentFixtureNoNgZone} from '@angular/core/testing';\n/**\n * @deprecated Import ComponentFixtureAutoDetect from @angular/core/testing\n */\nexport {ComponentFixtureAutoDetect} from '@angular/core/testing';\nexport class OverridingTestComponentBuilder extends TestComponentBuilder {\n  /** @internal */\n  _bindingsOverrides = new Map<Type, any[]>();\n  /** @internal */\n  _directiveOverrides = new Map<Type, Map<Type, Type>>();\n  /** @internal */\n  _templateOverrides = new Map<Type, string>();\n  /** @internal */\n  _animationOverrides = new Map<Type, AnimationEntryMetadata[]>();\n  /** @internal */\n  _viewBindingsOverrides = new Map<Type, any[]>();\n  /** @internal */\n  _viewOverrides = new Map<Type, ViewMetadata>();\n\n\n\n  constructor(injector: Injector) { super(injector); }\n\n  /** @internal */\n  _clone(): OverridingTestComponentBuilder {\n    let clone = new OverridingTestComponentBuilder(this._injector);\n    clone._viewOverrides = MapWrapper.clone(this._viewOverrides);\n    clone._directiveOverrides = MapWrapper.clone(this._directiveOverrides);\n    clone._templateOverrides = MapWrapper.clone(this._templateOverrides);\n    clone._bindingsOverrides = MapWrapper.clone(this._bindingsOverrides);\n    clone._viewBindingsOverrides = MapWrapper.clone(this._viewBindingsOverrides);\n    return clone;\n  }\n\n  overrideTemplate(componentType: Type, template: string): OverridingTestComponentBuilder {\n    let clone = this._clone();\n    clone._templateOverrides.set(componentType, template);\n    return clone;\n  }\n\n  overrideAnimations(componentType: Type, animations: AnimationEntryMetadata[]):\n      TestComponentBuilder {\n    var clone = this._clone();\n    clone._animationOverrides.set(componentType, animations);\n    return clone;\n  }\n\n  overrideView(componentType: Type, view: ViewMetadata): OverridingTestComponentBuilder {\n    let clone = this._clone();\n    clone._viewOverrides.set(componentType, view);\n    return clone;\n  }\n\n  overrideDirective(componentType: Type, from: Type, to: Type): OverridingTestComponentBuilder {\n    let clone = this._clone();\n    let overridesForComponent = clone._directiveOverrides.get(componentType);\n    if (!isPresent(overridesForComponent)) {\n      clone._directiveOverrides.set(componentType, new Map<Type, Type>());\n      overridesForComponent = clone._directiveOverrides.get(componentType);\n    }\n    overridesForComponent.set(from, to);\n    return clone;\n  }\n\n  overrideProviders(type: Type, providers: any[]): OverridingTestComponentBuilder {\n    let clone = this._clone();\n    clone._bindingsOverrides.set(type, providers);\n    return clone;\n  }\n\n  overrideViewProviders(type: Type, providers: any[]): OverridingTestComponentBuilder {\n    let clone = this._clone();\n    clone._viewBindingsOverrides.set(type, providers);\n    return clone;\n  }\n\n  createAsync<T>(rootComponentType: ConcreteType<T>): Promise<ComponentFixture<T>> {\n    this._applyMetadataOverrides();\n    return super.createAsync(rootComponentType);\n  }\n\n  createSync<T>(rootComponentType: ConcreteType<T>): ComponentFixture<T> {\n    this._applyMetadataOverrides();\n    return super.createSync(rootComponentType);\n  }\n\n  private _applyMetadataOverrides() {\n    let mockDirectiveResolver = this._injector.get(DirectiveResolver);\n    let mockViewResolver = this._injector.get(ViewResolver);\n    this._viewOverrides.forEach((view, type) => { mockViewResolver.setView(type, view); });\n    this._templateOverrides.forEach(\n        (template, type) => mockViewResolver.setInlineTemplate(type, template));\n    this._animationOverrides.forEach(\n        (animationsEntry, type) => mockViewResolver.setAnimations(type, animationsEntry));\n    this._directiveOverrides.forEach((overrides, component) => {\n      overrides.forEach(\n          (to, from) => { mockViewResolver.overrideViewDirective(component, from, to); });\n    });\n    this._bindingsOverrides.forEach(\n        (bindings, type) => mockDirectiveResolver.setProvidersOverride(type, bindings));\n    this._viewBindingsOverrides.forEach(\n        (bindings, type) => mockDirectiveResolver.setViewProvidersOverride(type, bindings));\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: Injector, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}