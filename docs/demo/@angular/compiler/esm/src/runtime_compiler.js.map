{"version":3,"file":"runtime_compiler.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/runtime_compiler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, ComponentFactory, ComponentResolver, Injectable} from '@angular/core';\n\nimport {BaseException} from '../src/facade/exceptions';\nimport {ConcreteType, IS_DART, Type, isBlank, isString, stringify} from '../src/facade/lang';\n\nimport {ListWrapper,} from '../src/facade/collection';\nimport {PromiseWrapper} from '../src/facade/async';\nimport {createHostComponentMeta, CompileDirectiveMetadata, CompilePipeMetadata, CompileIdentifierMetadata} from './compile_metadata';\nimport {TemplateAst,} from './template_ast';\nimport {StyleCompiler, StylesCompileDependency, CompiledStylesheet} from './style_compiler';\nimport {ViewCompiler, ViewCompileResult, ViewFactoryDependency, ComponentFactoryDependency} from './view_compiler/view_compiler';\nimport {TemplateParser} from './template_parser';\nimport {DirectiveNormalizer, NormalizeDirectiveResult} from './directive_normalizer';\nimport {CompileMetadataResolver} from './metadata_resolver';\nimport {CompilerConfig} from './config';\nimport * as ir from './output/output_ast';\nimport {jitStatements} from './output/output_jit';\nimport {interpretStatements} from './output/output_interpreter';\nimport {InterpretiveAppViewInstanceFactory} from './output/interpretive_view';\nexport class RuntimeCompiler implements ComponentResolver, Compiler {\n  private _compiledTemplateCache = new Map<any, CompiledTemplate>();\n  private _compiledHostTemplateCache = new Map<any, CompiledTemplate>();\n\n  constructor(\n      private _metadataResolver: CompileMetadataResolver,\n      private _templateNormalizer: DirectiveNormalizer, private _templateParser: TemplateParser,\n      private _styleCompiler: StyleCompiler, private _viewCompiler: ViewCompiler,\n      private _genConfig: CompilerConfig) {}\n\n  resolveComponent(component: Type|string): Promise<ComponentFactory<any>> {\n    if (isString(component)) {\n      return PromiseWrapper.reject(\n          new BaseException(`Cannot resolve component using '${component}'.`), null);\n    }\n    return this.compileComponentAsync(<ConcreteType<any>>component);\n  }\n\n  compileComponentAsync<T>(compType: ConcreteType<T>): Promise<ComponentFactory<T>> {\n    var templates = this._getTransitiveCompiledTemplates(compType, true);\n    var loadingPromises: Promise<any>[] = [];\n    templates.forEach((template) => {\n      if (template.loading) {\n        loadingPromises.push(template.loading);\n      }\n    });\n    return Promise.all(loadingPromises).then(() => {\n      templates.forEach((template) => { this._compileTemplate(template); });\n      return this._getCompiledHostTemplate(compType).proxyComponentFactory;\n    });\n  }\n\n  compileComponentSync<T>(compType: ConcreteType<T>): ComponentFactory<T> {\n    var templates = this._getTransitiveCompiledTemplates(compType, true);\n    templates.forEach((template) => {\n      if (template.loading) {\n        throw new BaseException(\n            `Can't compile synchronously as ${template.compType.name} is still being loaded!`);\n      }\n    });\n    templates.forEach((template) => { this._compileTemplate(template); });\n    return this._getCompiledHostTemplate(compType).proxyComponentFactory;\n  }\n\n  clearCacheFor(compType: Type) {\n    this._metadataResolver.clearCacheFor(compType);\n    this._compiledHostTemplateCache.delete(compType);\n    var compiledTemplate = this._compiledTemplateCache.get(compType);\n    if (compiledTemplate) {\n      this._templateNormalizer.clearCacheFor(compiledTemplate.normalizedCompMeta);\n      this._compiledTemplateCache.delete(compType);\n    }\n  }\n\n  clearCache(): void {\n    this._metadataResolver.clearCache();\n    this._compiledTemplateCache.clear();\n    this._compiledHostTemplateCache.clear();\n    this._templateNormalizer.clearCache();\n  }\n\n  private _getCompiledHostTemplate(type: Type): CompiledTemplate {\n    var compiledTemplate = this._compiledHostTemplateCache.get(type);\n    if (isBlank(compiledTemplate)) {\n      var compMeta = this._metadataResolver.getDirectiveMetadata(type);\n      assertComponent(compMeta);\n      var hostMeta = createHostComponentMeta(compMeta.type, compMeta.selector);\n      compiledTemplate = new CompiledTemplate(\n          true, compMeta.selector, compMeta.type, [], [type], [], [],\n          this._templateNormalizer.normalizeDirective(hostMeta));\n      this._compiledHostTemplateCache.set(type, compiledTemplate);\n    }\n    return compiledTemplate;\n  }\n\n  private _getCompiledTemplate(type: Type): CompiledTemplate {\n    var compiledTemplate = this._compiledTemplateCache.get(type);\n    if (isBlank(compiledTemplate)) {\n      var compMeta = this._metadataResolver.getDirectiveMetadata(type);\n      assertComponent(compMeta);\n      var viewDirectives: CompileDirectiveMetadata[] = [];\n      var viewComponentTypes: Type[] = [];\n      this._metadataResolver.getViewDirectivesMetadata(type).forEach(dirOrComp => {\n        if (dirOrComp.isComponent) {\n          viewComponentTypes.push(dirOrComp.type.runtime);\n        } else {\n          viewDirectives.push(dirOrComp);\n        }\n      });\n      var precompileComponentTypes = compMeta.precompile.map((typeMeta) => typeMeta.runtime);\n      var pipes = this._metadataResolver.getViewPipesMetadata(type);\n      compiledTemplate = new CompiledTemplate(\n          false, compMeta.selector, compMeta.type, viewDirectives, viewComponentTypes,\n          precompileComponentTypes, pipes, this._templateNormalizer.normalizeDirective(compMeta));\n      this._compiledTemplateCache.set(type, compiledTemplate);\n    }\n    return compiledTemplate;\n  }\n\n  private _getTransitiveCompiledTemplates(\n      compType: Type, isHost: boolean,\n      target: Set<CompiledTemplate> = new Set<CompiledTemplate>()): Set<CompiledTemplate> {\n    var template =\n        isHost ? this._getCompiledHostTemplate(compType) : this._getCompiledTemplate(compType);\n    if (!target.has(template)) {\n      target.add(template);\n      template.viewComponentTypes.forEach(\n          (compType) => { this._getTransitiveCompiledTemplates(compType, false, target); });\n      template.precompileHostComponentTypes.forEach(\n          (compType) => { this._getTransitiveCompiledTemplates(compType, true, target); });\n    }\n    return target;\n  }\n\n  private _compileTemplate(template: CompiledTemplate) {\n    if (template.isCompiled) {\n      return;\n    }\n    var compMeta = template.normalizedCompMeta;\n    var externalStylesheetsByModuleUrl = new Map<string, CompiledStylesheet>();\n    var stylesCompileResult = this._styleCompiler.compileComponent(compMeta);\n    stylesCompileResult.externalStylesheets.forEach(\n        (r) => { externalStylesheetsByModuleUrl.set(r.meta.moduleUrl, r); });\n    this._resolveStylesCompileResult(\n        stylesCompileResult.componentStylesheet, externalStylesheetsByModuleUrl);\n    var viewCompMetas = template.viewComponentTypes.map(\n        (compType) => this._getCompiledTemplate(compType).normalizedCompMeta);\n    var parsedTemplate = this._templateParser.parse(\n        compMeta, compMeta.template.template, template.viewDirectives.concat(viewCompMetas),\n        template.viewPipes, compMeta.type.name);\n    var compileResult = this._viewCompiler.compileComponent(\n        compMeta, parsedTemplate, ir.variable(stylesCompileResult.componentStylesheet.stylesVar),\n        template.viewPipes);\n    var depTemplates = compileResult.dependencies.map((dep) => {\n      let depTemplate: CompiledTemplate;\n      if (dep instanceof ViewFactoryDependency) {\n        let vfd = <ViewFactoryDependency>dep;\n        depTemplate = this._getCompiledTemplate(vfd.comp.runtime);\n        vfd.placeholder.runtime = depTemplate.proxyViewFactory;\n        vfd.placeholder.name = `viewFactory_${vfd.comp.name}`;\n      } else if (dep instanceof ComponentFactoryDependency) {\n        let cfd = <ComponentFactoryDependency>dep;\n        depTemplate = this._getCompiledHostTemplate(cfd.comp.runtime);\n        cfd.placeholder.runtime = depTemplate.proxyComponentFactory;\n        cfd.placeholder.name = `compFactory_${cfd.comp.name}`;\n      }\n      return depTemplate;\n    });\n    var statements =\n        stylesCompileResult.componentStylesheet.statements.concat(compileResult.statements);\n    var factory: any;\n    if (IS_DART || !this._genConfig.useJit) {\n      factory = interpretStatements(\n          statements, compileResult.viewFactoryVar, new InterpretiveAppViewInstanceFactory());\n    } else {\n      factory = jitStatements(\n          `${template.compType.name}.template.js`, statements, compileResult.viewFactoryVar);\n    }\n    template.compiled(factory);\n  }\n\n  private _resolveStylesCompileResult(\n      result: CompiledStylesheet, externalStylesheetsByModuleUrl: Map<string, CompiledStylesheet>) {\n    result.dependencies.forEach((dep, i) => {\n      var nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl);\n      var nestedStylesArr = this._resolveAndEvalStylesCompileResult(\n          nestedCompileResult, externalStylesheetsByModuleUrl);\n      dep.valuePlaceholder.runtime = nestedStylesArr;\n      dep.valuePlaceholder.name = `importedStyles${i}`;\n    });\n  }\n\n  private _resolveAndEvalStylesCompileResult(\n      result: CompiledStylesheet,\n      externalStylesheetsByModuleUrl: Map<string, CompiledStylesheet>): string[] {\n    this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);\n    if (IS_DART || !this._genConfig.useJit) {\n      return interpretStatements(\n          result.statements, result.stylesVar, new InterpretiveAppViewInstanceFactory());\n    } else {\n      return jitStatements(`${result.meta.moduleUrl}.css.js`, result.statements, result.stylesVar);\n    }\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: CompileMetadataResolver, },\n{type: DirectiveNormalizer, },\n{type: TemplateParser, },\n{type: StyleCompiler, },\n{type: ViewCompiler, },\n{type: CompilerConfig, },\n];\n}\n\nclass CompiledTemplate {\n  private _viewFactory: Function = null;\n  proxyViewFactory: Function;\n  proxyComponentFactory: ComponentFactory<any>;\n  loading: Promise<any> = null;\n  private _normalizedCompMeta: CompileDirectiveMetadata = null;\n  isCompiled = false;\n  isCompiledWithDeps = false;\n\n  constructor(\n      public isHost: boolean, selector: string, public compType: CompileIdentifierMetadata,\n      public viewDirectives: CompileDirectiveMetadata[], public viewComponentTypes: Type[],\n      public precompileHostComponentTypes: Type[], public viewPipes: CompilePipeMetadata[],\n      private _normalizeResult: NormalizeDirectiveResult) {\n    this.proxyViewFactory = (...args: any[]) => this._viewFactory.apply(null, args);\n    this.proxyComponentFactory = isHost ?\n        new ComponentFactory<any>(selector, this.proxyViewFactory, compType.runtime) :\n        null;\n    if (_normalizeResult.syncResult) {\n      this._normalizedCompMeta = _normalizeResult.syncResult;\n    } else {\n      this.loading = _normalizeResult.asyncResult.then((normalizedCompMeta) => {\n        this._normalizedCompMeta = normalizedCompMeta;\n        this.loading = null;\n      });\n    }\n  }\n\n  get normalizedCompMeta(): CompileDirectiveMetadata {\n    if (this.loading) {\n      throw new BaseException(`Template is still loading for ${this.compType.name}!`);\n    }\n    return this._normalizedCompMeta;\n  }\n\n  compiled(viewFactory: Function) {\n    this._viewFactory = viewFactory;\n    this.isCompiled = true;\n  }\n\n  depsCompiled() { this.isCompiledWithDeps = true; }\n}\n\nfunction assertComponent(meta: CompileDirectiveMetadata) {\n  if (!meta.isComponent) {\n    throw new BaseException(`Could not compile '${meta.type.name}' because it is not a component.`);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}